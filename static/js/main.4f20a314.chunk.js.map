{"version":3,"sources":["projectComponents/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["MemeGenerator","state","topText","bottomText","randImg","allMemeImgs","planets","hasErrors","handleChange","bind","handleRanImg","event","preventDefault","rand","Math","floor","random","this","length","setState","url","target","name","value","fetch","then","res","json","memes","data","catch","style","display","color","fontFamily","fontSize","className","type","placeholder","onChange","onClick","alt","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"ySAmFeA,EAjFf,YACE,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,QAAS,GACTC,YAAa,GACbC,QAAS,GACTC,WAAW,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXR,EADhB,0EAceE,GACXA,EAAMC,iBACN,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKhB,MAAMI,YAAYa,QAAU,EAEvED,KAAKE,SAAS,CAAEf,QAASa,KAAKhB,MAAMI,YAAYQ,GAAMO,QAlB1D,mCAoBeT,GAAQ,IAAD,EACMA,EAAMU,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdN,KAAKE,SAAL,eAAiBG,EAAOC,MAtB5B,0CAwBuB,IAAD,OAClBC,MAAM,qCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAQ,IACNE,EAAUF,EAAIG,KAAdD,MACN,OAAO,EAAKT,SAAS,CAAEd,YAAauB,OAErCE,OAAM,kBAAM,EAAKX,SAAS,CAAEZ,WAAW,SA/B9C,+BAmCI,OACE,6BACE,uBACEwB,MACGd,KAAKb,QAEF,CAAE4B,QAAS,QADX,CAAEC,MAAO,UAAWC,WAAY,YAAaC,SAAU,SAI5DlB,KAAKhB,MAAMG,QACR,8BACA,2BAEN,0BAAMgC,UAAU,aACd,2BACEd,KAAK,UACLC,MAAON,KAAKhB,MAAMC,QAClBmC,KAAK,OACLC,YAAY,YACZC,SAAUtB,KAAKT,eAEjB,2BACEc,KAAK,aACLC,MAAON,KAAKhB,MAAME,WAClBkC,KAAK,OACLC,YAAY,eACZC,SAAUtB,KAAKT,eAEjB,4BAAQgC,QAASvB,KAAKP,cAAtB,YAGF,yBAAK0B,UAAU,QACb,yBAAKK,IAAI,GAAGC,IAAKzB,KAAKhB,MAAMG,UAC5B,wBAAIgC,UAAU,OACXnB,KAAKhB,MAAMG,QAAUa,KAAKhB,MAAMC,QAAU,IAE7C,wBAAIkC,UAAU,UACXnB,KAAKhB,MAAMG,QAAUa,KAAKhB,MAAME,WAAa,IAEhD,6BARF,IAQS,mCA1EjB,GAAmCwC,a,YCkBpBC,MAdf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,+CADF,gBAKF,kBAAC,EAAD,QCHcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4f20a314.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randImg: \"\",\n      allMemeImgs: [],\n      planets: {},\n      hasErrors: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRanImg = this.handleRanImg.bind(this);\n  }\n  handleRanImg(event) {\n    event.preventDefault();\n    let rand = Math.floor(Math.random() * this.state.allMemeImgs.length) + 1;\n\n    this.setState({ randImg: this.state.allMemeImgs[rand].url });\n  }\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(res => res.json())\n      .then(res => {\n        let { memes } = res.data;\n        return this.setState({ allMemeImgs: memes });\n      })\n      .catch(() => this.setState({ hasErrors: true }));\n  }\n\n  render() {\n    return (\n      <div>\n        <p\n          style={\n            !this.randImg\n              ? { color: \"#6441a5\", fontFamily: \"monospace\", fontSize: \"200%\" }\n              : { display: \"none\" }\n          }\n        >\n          {this.state.randImg\n            ? \"Here is your meme, enjoy :)\"\n            : \"First shuffle an image!\"}\n        </p>\n        <form className=\"meme-form\">\n          <input\n            name=\"topText\"\n            value={this.state.topText}\n            type=\"text\"\n            placeholder=\"Top text:\"\n            onChange={this.handleChange}\n          ></input>\n          <input\n            name=\"bottomText\"\n            value={this.state.bottomText}\n            type=\"text\"\n            placeholder=\"Bottom text:\"\n            onChange={this.handleChange}\n          ></input>\n          <button onClick={this.handleRanImg}>Shuffle</button>\n        </form>\n\n        <div className=\"meme\">\n          <img alt=\"\" src={this.state.randImg}></img>\n          <h2 className=\"top\">\n            {this.state.randImg ? this.state.topText : \"\"}\n          </h2>\n          <h2 className=\"bottom\">\n            {this.state.randImg ? this.state.bottomText : \"\"}\n          </h2>\n          <br /> <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\n//import ReactDOM from \"react-dom\";\nimport MemeGenerator from \"./projectComponents/MemeGenerator\";\nimport \"./App.css\";\nimport \"./projectComponents/style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <h1>Fun Factory....</h1>\n          Scroll down\n        </div>\n      </header>\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}