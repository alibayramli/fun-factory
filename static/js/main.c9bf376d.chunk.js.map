{"version":3,"sources":["projectComponents/Navbar.js","projectComponents/Footer.js","projectComponents/Album.js","projectComponents/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","boxShadow","backgroundColor","Navbar","classes","AppBar","position","className","Toolbar","variant","IconButton","edge","color","aria-label","Typography","Copyright","Date","getFullYear","Link","href","display","flexDirection","minHeight","main","marginTop","spacing","marginBottom","footer","padding","palette","type","grey","Footer","CssBaseline","Container","component","maxWidth","gutterBottom","align","paragraph","style","textDecoration","icon","marginRight","heroContent","background","paper","heroButtons","cardGrid","paddingTop","paddingBottom","card","height","cardMedia","cardMediaImgList","cardContent","flexGrow","cards","Album","props","imgList","shuffledImgs","Fragment","randImg","Grid","container","map","item","key","xs","sm","md","Card","CardMedia","title","src","alt","width","topText","bottomText","CardActions","TextField","id","label","name","value","onChange","handleChange","CardContent","shuffleAfterDel","justify","Button","onClick","handlePrevImg","disabled","imgCount","indexOfCurrentImg","handleNextImg","length","index","image","size","handleDelete","MemeGenerator","state","allMemeImgs","bind","handleRanImg","event","preventDefault","rand","Math","floor","random","this","includes","url","setState","concat","indexOf","newShuffledImg","filter","el","i","target","fetch","then","res","json","memes","data","catch","e","console","log","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c9bf376d.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Typography, Toolbar, IconButton } from \"@material-ui/core/\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    boxShadow: \"none\",\n    backgroundColor: \"purple\"\n  }\n}));\nexport default function Navbar() {\n\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\" className={classes.root}>\n      <Toolbar variant=\"dense\">\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\"></IconButton>\n        <Typography variant=\"h4\" color=\"inherit\">\n          Fun Factory\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\">\n      {`Â© ${new Date().getFullYear()} `}\n      <Link color=\"inherit\" href=\"https://github.com/alibayramli\">\n        Ali Bayramli\n      </Link>{' '}\n\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '50vh',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Container component=\"main\" className={classes.main} maxWidth=\"sm\">\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          Source code\n        </Typography>\n        <Typography\n          variant=\"h5\"\n          align=\"center\"\n          color=\"textSecondary\"\n          paragraph\n        >\n          You can see the source code in my <a href={'https://github.com/alibayramli/fun-factory'} style={{ textDecoration: 'none' }}>GitHub</a>\n        </Typography>\n\n      </Container>\n\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n\n          <Copyright />\n        </Container>\n      </footer>\n    </div>\n  );\n}","import React from \"react\";\nimport Footer from \"./Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardMedia: {\n    paddingTop: \"2%\",\n  },\n  cardMediaImgList: {\n    paddingTop: \"56.25%\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst cards = [1];\nexport default function Album(props) {\n  const classes = useStyles();\n  const imgList = props.component.shuffledImgs || [];\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              How it works\n            </Typography>\n            <Typography\n              variant=\"h5\"\n              align=\"center\"\n              color=\"textSecondary\"\n              paragraph\n            >\n              Click <i>shuffle</i> button to get a random meme image and use\n              your creativity by adding top/bottom texts!\n            </Typography>\n            <div style={props.component.randImg ? null : { display: \"none\" }}>\n              <Grid container spacing={4}>\n                {cards.map((card) => (\n                  <Grid item key={card} xs={12} sm={12} md={12}>\n                    <Card className={classes.card}>\n                      <CardMedia className={classes.cardMedia} title=\"Image title\">\n                        <div className=\"container meme\">\n                          <img\n                            src={props.component.randImg}\n                            alt=\"Snow\"\n                            style={{ width: \"100%\" }}\n                          />\n                          <h2 className=\"top\">{props.component.topText}</h2>\n                          <h2 className=\"bottom\">{props.component.bottomText}</h2>\n                          <CardActions>\n                            <TextField\n                              id=\"standard-search\"\n                              label=\"top text\"\n                              type=\"search\"\n                              name=\"topText\"\n                              value={props.component.topText}\n                              onChange={props.handleChange}\n                            />\n                            <TextField\n                              id=\"standard-search\"\n                              label=\"bottom text\"\n                              type=\"search\"\n                              name=\"bottomText\"\n                              value={props.component.bottomText}\n                              onChange={props.handleChange}\n                            />\n                          </CardActions>\n                        </div>\n                      </CardMedia>\n                      <CardContent className={classes.cardContent}>\n                        <Typography color=\"textSecondary\">\n                          Here is your meme image. Enjoy ^^\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                    <Typography color=\"textSecondary\" style={!props.component.shuffleAfterDel ? { display: 'none' } : null}>\n                      Note:you <b>must</b> shuffle first to click previous/next after deletion\n                    </Typography>\n                    <br />\n                  </Grid>\n                ))}\n              </Grid>\n            </div>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    onClick={props.handlePrevImg}\n                    disabled={(!props.component.imgCount || props.component.indexOfCurrentImg === 0 || props.component.shuffleAfterDel) ? true : false}\n                  >\n                    Previous\n                  </Button>\n                </Grid>\n                <Grid item >\n                  <Button\n                    variant=\"contained\"\n                    onClick={props.handleNextImg}\n                    disabled={(props.component.indexOfCurrentImg === props.component.shuffledImgs.length - 1 || props.component.shuffledImgs.length === 0 || props.component.shuffleAfterDel) ? true : false}\n                  >\n                    Next\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.src}\n                    disabled={props.component.indexOfCurrentImg < props.component.shuffledImgs.length - 1 ? true : false}\n                  >\n                    Shuffle\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n          <Container className={classes.cardGrid} maxWidth=\"md\">\n            <Typography color=\"textPrimary\"\n              variant=\"h4\" style={props.component.shuffledImgs.length ? { display: 'none', paddingBottom: '3%' } : null}>\n              There is no meme in the card, why not exploring?\n            </Typography>\n            <Typography color=\"textPrimary\"\n              variant=\"h4\" style={!props.component.shuffledImgs.length ? { display: 'none', paddingBottom: '3%' } : null}>\n              Great! you have {props.component.shuffledImgs.length} memes, keep it up ^^\n            </Typography> <br />\n            <br />\n            <Grid container spacing={4}>\n              {imgList.map((card, index) => (\n                <Grid item key={index} xs={12} sm={6} md={4}>\n                  <Card className={classes.card}>\n                    <CardMedia\n                      className={classes.cardMediaImgList}\n                      image={card}\n                      title=\"Image title\"\n                    />\n                    <CardContent className={classes.cardContent}>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        Meme {index + 1}\n                      </Typography>\n                    </CardContent>\n                    <CardActions>\n                      {/* <Button size=\"small\" color=\"primary\">\n                        View\n                    </Button> */}\n                      <Button size=\"small\" color=\"secondary\" onClick={() => props.handleDelete(index)}>\n                        Delete\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </Grid>\n              ))}\n            </Grid>\n          </Container>\n        </div>\n      </main>\n      <Footer component={props.component} />\n    </React.Fragment>\n  );\n}\n","import React, { Component } from \"react\";\nimport NavBar from \"./Navbar\";\nimport Album from \"./Album\";\nexport class MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      indexOfCurrentImg: 0,\n      randImg: \"\",\n      imgCount: 0,\n      shuffleAfterDel: false,\n      allMemeImgs: [],\n      shuffledImgs: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRanImg = this.handleRanImg.bind(this);\n    this.handlePrevImg = this.handlePrevImg.bind(this);\n    this.handleNextImg = this.handleNextImg.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n\n  }\n  handleRanImg(event) {\n    event.preventDefault();\n    let rand = Math.floor(Math.random() * (this.state.allMemeImgs.length) - 1) + 1;\n    if (!this.state.shuffledImgs.includes(this.state.allMemeImgs[rand].url)) {\n      this.setState({\n        randImg: this.state.allMemeImgs[rand].url,\n        imgCount: this.state.imgCount + 1,\n        shuffledImgs: this.state.shuffledImgs.concat(this.state.allMemeImgs[rand].url),\n        shuffleAfterDel: false\n      }, () => {\n        this.setState(\n          {\n            indexOfCurrentImg: this.state.shuffledImgs.indexOf(this.state.randImg)\n          });\n      })\n    }\n  }\n  handlePrevImg() {\n    this.setState({ indexOfCurrentImg: this.state.indexOfCurrentImg - 1 }, () => {\n      this.setState({ randImg: this.state.shuffledImgs[this.state.indexOfCurrentImg] });\n    })\n  }\n  handleNextImg() {\n    this.setState({ indexOfCurrentImg: this.state.indexOfCurrentImg + 1 }, () => {\n      this.setState({ randImg: this.state.shuffledImgs[this.state.indexOfCurrentImg] });\n    })\n  }\n  handleDelete(index) {\n    this.setState({ shuffleAfterDel: true }, () => {\n      let newShuffledImg = this.state.shuffledImgs.filter((el, i) => i !== index);\n      this.setState({ shuffledImgs: newShuffledImg }, () => {\n        this.setState({ randImg: this.state.shuffledImgs[this.state.shuffledImgs.length - 1] });\n      })\n    })\n\n  }\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((res) => {\n        let { memes } = res.data;\n        return this.setState({ allMemeImgs: memes });\n      })\n      .catch((e) => console.log(`Error : ${e}`));\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Album\n          component={this.state}\n          src={this.handleRanImg}\n          handleChange={this.handleChange}\n          handlePrevImg={this.handlePrevImg}\n          handleNextImg={this.handleNextImg}\n          handleDelete={this.handleDelete}\n        />\n      </div>\n    );\n  }\n}\nexport default MemeGenerator;","import React from \"react\";\nimport MemeGenerator from \"./projectComponents/MemeGenerator\";\nimport \"./App.css\";\nimport \"./projectComponents/style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}