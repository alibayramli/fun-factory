{"version":3,"sources":["projectComponents/Navbar.js","projectComponents/Footer.js","projectComponents/Album.js","projectComponents/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","useStyles","makeStyles","theme","footer","backgroundColor","palette","background","paper","padding","spacing","Footer","classes","className","align","Date","getFullYear","Link","href","icon","marginRight","heroContent","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","cards","Album","props","Fragment","CssBaseline","Container","maxWidth","component","gutterBottom","paragraph","Grid","container","justify","item","Button","onClick","src","style","randImg","map","key","xs","sm","md","Card","CardMedia","title","alt","width","topText","bottomText","CardActions","TextField","id","label","type","name","value","onChange","handleChange","CardContent","MemeGenerator","state","allMemeImgs","hasErrors","bind","handleRanImg","event","preventDefault","rand","Math","floor","random","this","length","setState","url","target","fetch","then","res","json","memes","data","catch","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.cf7769b4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\nimport { AppBar, Typography, Toolbar, IconButton } from \"@material-ui/core/\";\nexport default function Navbar() {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\"></IconButton>\n        <Typography variant=\"h4\" color=\"inherit\">\n          Fun Factory\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\nexport default function Footer() {\n  const classes = useStyles();\n  return (\n    <footer className={classes.footer}>\n      <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\">\n        {\" Â© \"}\n        {new Date().getFullYear() + \" \"}\n        <Link color=\"inherit\" href=\"#\">\n          Ali Bayramli\n        </Link>{\" \"}\n      </Typography>\n    </footer>\n  );\n}\n","import React from \"react\";\nimport Footer from \"./Footer\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardMedia: {\n    // 16:9\n    paddingTop: \"2%\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst cards = [1];\nexport default function Album(props) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              How it works\n            </Typography>\n            <Typography\n              variant=\"h5\"\n              align=\"center\"\n              color=\"textSecondary\"\n              paragraph\n            >\n              Click <i>shuffle</i> button to get a random meme image and use\n              your creativity by adding top/bottom texts!\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.src}\n                  >\n                    Shuffle\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container\n          className={classes.cardGrid}\n          maxWidth=\"md\"\n          style={props.component.randImg ? null : { display: \"none\" }}\n        >\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {cards.map((card) => (\n              <Grid item key={card} xs={12} sm={12} md={12}>\n                <Card className={classes.card}>\n                  <CardMedia className={classes.cardMedia} title=\"Image title\">\n                    <div className=\"container meme\">\n                      <img\n                        src={props.component.randImg}\n                        alt=\"Snow\"\n                        style={{ width: \"100%\" }}\n                      />\n                      <h2 className=\"top\">{props.component.topText}</h2>\n                      <h2 className=\"bottom\">{props.component.bottomText}</h2>\n                      <CardActions>\n                        <TextField\n                          id=\"standard-search\"\n                          label=\"top text\"\n                          type=\"search\"\n                          name=\"topText\"\n                          value={props.component.topText}\n                          onChange={props.handleChange}\n                        />\n                        <TextField\n                          id=\"standard-search\"\n                          label=\"bottom text\"\n                          type=\"search\"\n                          name=\"bottomText\"\n                          value={props.component.bottomText}\n                          onChange={props.handleChange}\n                        />\n                      </CardActions>\n                    </div>\n                  </CardMedia>\n                  <CardContent className={classes.cardContent}>\n                    <Typography color=\"textSecondary\">\n                      Here is your meme image. Enjoy ^^\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <Footer component={props.component} />\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n","import React, { Component } from \"react\";\nimport NavBar from \"./Navbar\";\nimport Album from \"./Album\";\nimport { Typography } from \"@material-ui/core\";\nexport class MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randImg: \"\",\n      allMemeImgs: [],\n      hasErrors: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleRanImg = this.handleRanImg.bind(this);\n  }\n  handleRanImg(event) {\n    event.preventDefault();\n    let rand = Math.floor(Math.random() * this.state.allMemeImgs.length) + 1;\n\n    this.setState({ randImg: this.state.allMemeImgs[rand].url });\n  }\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((res) => {\n        let { memes } = res.data;\n        return this.setState({ allMemeImgs: memes });\n      })\n      .catch(() => this.setState({ hasErrors: true }));\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n\n        <Album\n          component={this.state}\n          src={this.handleRanImg}\n          handleChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\nimport MemeGenerator from \"./projectComponents/MemeGenerator\";\nimport \"./App.css\";\nimport \"./projectComponents/style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}